import axios from "axios";

const Pinata = {
  sendFile: async (file, obj, callbackSuccess, callbackError) => {
    if (file) {
      const formData = new FormData();
      formData.append("file", file);

      const metadata = JSON.stringify({
        name: file.name,
      });
      formData.append("pinataMetadata", metadata);

      const options = JSON.stringify({
        cidVersion: 0,
      });
      formData.append("pinataOptions", options);

      try {
        const resFile = await axios.post(
          "https://api.pinata.cloud/pinning/pinFileToIPFS",
          formData,
          {
            maxBodyLength: "Infinity",
            headers: {
              "Content-Type": `multipart/form-data; boundary=${formData._boundary}`,
              Authorization:
                `Bearer ${process.env.REACT_APP_PINATA_API_JWT}`,
            },
          }
        );

        callbackSuccess(resFile.data, obj);
      } catch (error) {
        callbackError(error, "Error sending File to IPFS");
      }
    }
  },

  sendJSON: async (json, obj, callbackSuccess, callbackError) => {
    if (json) {
      try {
        var data = JSON.stringify({
          pinataOptions: {
            cidVersion: 1,
          },
          pinataMetadata: {
            name: json.name,
            keyvalues: {
              test: "testValue",
            },
          },
          pinataContent: json,
        });

        var config = {
          method: "post",
          url: "https://api.pinata.cloud/pinning/pinJSONToIPFS",
          headers: {
            "Content-Type": "application/json",
            Authorization:
              `Bearer ${process.env.REACT_APP_PINATA_API_JWT}`,
          },
          data: data,
        };

        const res = await axios(config);

        callbackSuccess(res.data, obj);
      } catch (error) {
        callbackError(error, "Error sending File to IPFS");
      }
    }
  },

  convertToIPFSJSON: (carblock) => {
    let metadata = {
      description: "Carblocks JSON generated by c0-lt & mlazzje",
      external_url: "https://carblocks.vercel.app",
      image: carblock.image,
      name: carblock.brand + " " + carblock.model,
      attributes: [
        {trait_type: "Brand", value: carblock.brand},
        {trait_type: "Model", value: carblock.model},
        {trait_type: "Energy", value: carblock.energy},
        {trait_type: "Registration number", value: carblock.registrationNumber},
        {trait_type: "Kilometers", value: carblock.kilometers},
      ],
    };
    return metadata;
  },

  convertCarblockFromMetadata: (metadata) => {
    let mapping = {
      Brand: "brand",
      Model: "model",
      Energy: "energy",
      "Registration number": "registrationNumber",
      Kilometers: "kilometers",
    };
    let carblock = {
      brand: "",
      model: "",
      registrationNumber: "",
      kilometers: 0,
      energy: "",
      image: metadata.image,
    };
    for (let a = 0; a < metadata.attributes.length; a++) {
      let attribute = metadata.attributes[a];
      carblock[mapping[attribute.trait_type]] = attribute.value;
    }
    return carblock;
  },
};

export default Pinata;
